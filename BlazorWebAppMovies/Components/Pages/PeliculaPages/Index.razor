@page "/peliculas"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorWebAppMovies
@using BlazorWebAppMovies.Data
@implements IAsyncDisposable
@inject IDbContextFactory<BlazorWebAppMovies.Data.BlazorWebAppMoviesContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>
<div>
    <form action="/peliculas" data-enhance data-permanent>
        <input type="search" name="FiltroTitulo" />
        <input type="submit" value="Search" />
    </form>
</div>

<p>
    <a href="peliculas/create">Create New</a>
</p>

<QuickGrid Class="table" Items="PeliculasFiltradas">
    <PropertyColumn Property="pelicula => pelicula.Titulo" />
    <PropertyColumn Property="pelicula => pelicula.FechaPublicacion" Title="Lanzamiento" />
    <PropertyColumn Property="pelicula => pelicula.Genero" />
    <PropertyColumn Property="pelicula => pelicula.Precio" />

    <TemplateColumn Context="pelicula">
        <a href="@($"peliculas/edit?id={pelicula.Id}")">Edit</a> |
        <a href="@($"peliculas/details?id={pelicula.Id}")">Details</a> |
        <a href="@($"peliculas/delete?id={pelicula.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    [SupplyParameterFromQuery]
    private string? FiltroTitulo { get; set; }

    private IQueryable<Pelicula> PeliculasFiltradas => context.Pelicula.Where(m => m.Titulo!.Contains(FiltroTitulo ??
    string.Empty));


    private BlazorWebAppMoviesContext context = default!;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
